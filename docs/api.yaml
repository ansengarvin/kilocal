openapi: 3.0.3
info:
  title: KiloCalorie API
  description: A RESTful API for tracking daily caloric intake
  version: 0.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /login:
    post:
      summary: Login
      description: Login with the given username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user
                password:
                  type: string
                  description: The password of the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT token
        '401':
          description: Unauthorized

  /users:
    post:
      summary: Create a new user
      description: Create a new user with the given username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the new user
                password:
                  type: string
                  description: The password of the new user
                name:
                  type: string
                  description: The name of the new user
                weight:
                  type: number
                  description: The weight of the new user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the new user
                  email:
                    type: string
                    description: The email of the new user
                  name:
                    type: string
                    description: The name of the new user
                  weight:
                    type: number
                    description: The weight of the new user
                  token:
                    type: string
                    description: The token of the new user
        '403':
          description: User already exists

    
  /users/{id}:
    get:
      summary: Get a user by id
      description: Get a user by their id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the user
                  email:
                    type: string
                    description: The email of the user
                  name:
                    type: string
                    description: The name of the user
                  weight:
                    type: number
                    description: The weight of the user
        '401':
          description: Unauthorized
        '404':
          description: User does not exist
    put:
      summary: Update a user by id
      description: Update a user by their id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user
                name:
                  type: string
                  description: The name of the user
                weight:
                  type: number
                  description: The weight of the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the user
                  email:
                    type: string
                    description: The email of the user
                  name:
                    type: string
                    description: The name of the user
                  weight:
                    type: number
                    description: The weight of the user
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User does not exist
  

  /users/{id}/recipes/:
    post:
        summary: Create a new recipe for a user
        description: Create a new recipe for a user by their ID
        parameters:
          - name: id
            in: path
            required: true
            description: The id of the user to create a recipe for
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the recipe
                  foods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the food item
                        name:
                          type: string
                          description: The name of the food in the recipe
                        calories:
                          type: number
                          description: The number of calories of this food item
                        position:
                          type: integer
                          description: The position of the food item in the recipe
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The id of the recipe
                    name:
                      type: string
                      description: The name of the recipe
                    calories:
                      type: number
                      description: The total calories for the recipe
          '401':
            description: Unauthorized
          '404':
            description: User does not exist
    get:
      summary: Get all recipes for a user
      description: Get all recipes for a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get recipes for
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The id of the recipe
                    name:
                      type: string
                      description: The name of the recipe
                    calories:
                      type: number
                      description: The total calories for the recipe
        '401':
          description: Unauthorized
        '404':
          description: User does not exist.
    
  /users/{id}/recipes/{recipeId}:
    get:
      summary: Get a recipe by id
      description: Get a recipe by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get a recipe for
          schema:
            type: integer
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to get
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the recipe
                  name:
                    type: string
                    description: The name of the recipe
                  calories:
                    type: number
                    description: The total calories for the recipe
                  foods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the food item
                        name:
                          type: string
                          description: The name of the food in the recipe
                        calories:
                          type: number
                          description: The number of calories of this food item
                        position:
                          type: integer
                          description: The position of the food item in the recipe
        '401':  
          description: Unauthorized
        '404':
          description: User does not exist, recipe does not exist.
    put:
      summary: Update a recipe by id
      description: Update a recipe by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to update a recipe for
          schema:
            type: integer
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the recipe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the recipe
                  name:
                    type: string
                    description: The name of the recipe
                  calories:
                    type: number
                    description: The total calories for the recipe
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User does not exist.
    delete:
      summary: Delete a recipe by id
      description: Delete a recipe by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to delete a recipe for
          schema:
            type: integer
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to delete
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: User does not exist, recipe does not exist, or access to this user's information is unauthorized.
  /users/{id}/recipes/{recipe_id}/food:
    post:
      summary: Add a food item to a recipe
      description: Add a food item to a recipe by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to add a food item to a recipe for
          schema:
            type: integer
        - name: recipe_id
          in: path
          required: true
          description: The id of the recipe to add a food item to
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The id of the food item
                name:
                  type: string
                  description: The name of the food in the recipe
                calories:
                  type: number
                  description: The number of calories of this food item
                position:
                  type: integer
                  description: The position of the food item in the recipe
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the food item
                  name:
                    type: string
                    description: The name of the food in the recipe
                  calories:
                    type: number
                    description: The number of calories of this food item
                  position:
                    type: integer
                    description: The position of the food item in the recipe
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, recipe does not exist.
    get:
      summary: Get all food items for a recipe
      description: Get all food items for a recipe by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get food items for a recipe for
          schema:
            type: integer
        - name: recipe_id
          in: path
          required: true
          description: The id of the recipe to get food items for
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /users/{id}/recipes/{recipe_id}/food/{food_id}:
    get:
      summary: Get a food item by id
      description: Get a food item by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get a food item for
          schema:
            type: integer
        - name: recipe_id
          in: path
          required: true
          description: The id of the recipe to get a food item for
          schema:
            type: integer
        - name: food_id
          in: path
          required: true
          description: The id of the food item to get
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the food item
                  name:
                    type: string
                    description: The name of the food in the recipe
                  calories:
                    type: number
                    description: The number of calories of this food item
                  position:
                    type: integer
                    description: The position of the food item in the recipe
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, recipe does not exist, food item does not exist.
    put:
      summary: Update a food item by id
      description: Update a food item by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to update a food item for
          schema:
            type: integer
        - name: recipe_id
          in: path
          required: true
          description: The id of the recipe to update a food item for
          schema:
            type: integer
        - name: food_id
          in: path
          required: true
          description: The id of the food item to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the food in the recipe
                calories:
                  type: number
                  description: The number of calories of this food item
                position:
                  type:
  /users/{id}/days/{date}:
    get:
      summary: Gets all recipes and foods on a single day
      description: Gets all recipes and foods on a single day
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to get food items for a recipe for
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: The date to get food items for
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the recipe
                        name:
                          type: string
                          description: The name of the recipe
                        calories:
                          type: number
                          description: The total calories for the recipe
                        position:
                          type: number
                          description: The position of the recipe in the day
                        foods:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                description: The id of the food item
                              name:
                                type: string
                                description: The name of the food in the recipe
                              calories:
                                type: number
                                description: The number of calories of this food item
                              position:
                                type: integer
                                description: The position of the food item in the recipe
                  foods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The id of the food item
                        name:
                          type: string
                          description: The name of the food in the recipe
                        calories:
                          type: number
                          description: The number of calories of this food item
                        position:
                          type: integer
                          description: The position of the food item in the day
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, recipe does not exist.
  /users/{id}/days/{date}/recipes/:
    post:
      summary: Add a recipe to a day
      description: Add a recipe to a day by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to add a recipe to a day for
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: The date to add a recipe to
          schema:
            type: string
            format: date
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The id of the recipe to add
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The id of the recipe
                  name:
                    type: string
                    description: The name of the recipe
                  calories:
                    type: number
                    description: The total calories for the recipe
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, recipe does not exist.
  /users/{id}/days/{date}/recipes/{recipe_id}:
    delete:
      summary: Delete a recipe from a day
      description: Delete a recipe from a day by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to delete a recipe from a day for
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: The date to delete a recipe from
          schema:
            type: string
            format: date
        - name: recipe_id
          in: path
          required: true
          description: The id of the recipe to delete
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, recipe does not exist.
  /users/{id}/days/{date}/foods/:
    post:
      summary: Add a food item to a day
      description: Add a food item to a day by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to add a food item to a day for
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: The date to add a food item to
          schema:
            type: string
            format: date
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The id of the food item to add
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the food in the recipe
                  calories:
                    type: number
                    description: The number of calories of this food item
                  position:
                    type: integer
                    description: The position of the food item in the day
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, food item does not exist.
  /users/{id}/days/{date}/food/{food_id}:
    put:
      summary: Update a food item by id
      description: Update a food item by its id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to update a food item for
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: The date to update a food item for
          schema:
            type: string
            format: date
        - name: food_id
          in: path
          required: true
          description: The id of the food item to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the food in the recipe
                calories:
                  type: number
                  description: The number of calories of this food item
                position:
                  type: integer
                  description: The position of the food item in the day
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the food in the recipe
                  calories:
                    type: number
                    description: The number of calories of this food item
                  position:
                    type: integer
                    description: The position of the food item in the day
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, food item does not
    delete:
      summary: Delete a food item from a day
      description: Delete a food item from a day by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to delete a food item from a day for
          schema:
            type: integer
        - name: date
          in: path
          required: true
          description: The date to delete a food item from
          schema:
            type: string
            format: date
        - name: food_id
          in: path
          required: true
          description: The id of the food item to delete
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: User does not exist, food item does not exist.

